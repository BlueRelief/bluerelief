name: Deploy Production

on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  REGISTRY: registry.rsft.co
  BACKEND_IMAGE: bluerelief/backend
  FRONTEND_IMAGE: bluerelief/frontend
  EMAIL_SERVICE_IMAGE: bluerelief/email-service

jobs:
  deploy-production:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Auto-bump version
        id: version
        run: |
          # Run auto-version script
          chmod +x scripts/auto-version.sh
          OUTPUT=$(./scripts/auto-version.sh)
          
          # Extract values
          CURRENT_VERSION=$(echo "$OUTPUT" | grep "current_version=" | cut -d'=' -f2)
          NEW_VERSION=$(echo "$OUTPUT" | grep "new_version=" | cut -d'=' -f2)
          BUMP_TYPE=$(echo "$OUTPUT" | grep "bump_type=" | cut -d'=' -f2)
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Version info
        run: |
          echo "Version ${{ steps.version.outputs.version }} will be used for this deployment"

      - name: Set up environment
        id: vars
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          COMMIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="v${VERSION}-${COMMIT_SHA}"
          
          echo "Building production release:"
          echo "  Previous Version: v${{ steps.version.outputs.current_version }}"
          echo "  New Version: v${VERSION}"
          echo "  Bump Type: ${{ steps.version.outputs.bump_type }}"
          echo "  Commit SHA: $COMMIT_SHA"
          echo "  Image Tag: $IMAGE_TAG"
          echo "  Message: $(git log -1 --pretty=%B | head -n 1)"
          echo "  Author: $(git log -1 --pretty=%an)"
          echo "  Date: $(git log -1 --pretty=%ad)"
          echo ""
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push backend
        run: |
          cd server
          docker build \
            -f Dockerfile.prod \
            --build-arg VERSION=${{ steps.vars.outputs.version }} \
            --build-arg COMMIT_SHA=${{ steps.vars.outputs.commit_sha }} \
            -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.vars.outputs.image_tag }} \
            -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest \
            .
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.vars.outputs.image_tag }}
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest

      - name: Build and push frontend
        run: |
          cd client
          docker build \
            -f Dockerfile.prod \
            --build-arg NEXT_PUBLIC_API_URL=https://api.private.bluerelief.app \
            --build-arg NEXT_PUBLIC_MAPBOX_TOKEN=${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }} \
            --build-arg VERSION=${{ steps.vars.outputs.version }} \
            -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.vars.outputs.image_tag }} \
            -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest \
            .
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.vars.outputs.image_tag }}
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest

      - name: Build and push email-service
        run: |
          cd email-service
          docker build \
            -f Dockerfile \
            --build-arg VERSION=${{ steps.vars.outputs.version }} \
            -t ${{ env.REGISTRY }}/${{ env.EMAIL_SERVICE_IMAGE }}:${{ steps.vars.outputs.image_tag }} \
            -t ${{ env.REGISTRY }}/${{ env.EMAIL_SERVICE_IMAGE }}:latest \
            .
          docker push ${{ env.REGISTRY }}/${{ env.EMAIL_SERVICE_IMAGE }}:${{ steps.vars.outputs.image_tag }}
          docker push ${{ env.REGISTRY }}/${{ env.EMAIL_SERVICE_IMAGE }}:latest

      - name: Deploy to production
        run: |
          helm upgrade --install bluerelief \
            /home/geeth/Development/k8s/helm/celery-app-chart \
            -f /home/geeth/Development/k8s/helm/celery-app-chart/bluerelief-values.yaml \
            -n bluerelief \
            --create-namespace \
            --set app.image.tag=${{ steps.vars.outputs.image_tag }} \
            --set frontend.image.tag=${{ steps.vars.outputs.image_tag }} \
            --set emailService.image.tag=${{ steps.vars.outputs.image_tag }} \
            --set emailService.ingress.enabled=true \
            --set emailService.ingress.host="email-api.private.bluerelief.app" \
            --wait

      - name: Create Git Tag and Release
        run: |
          VERSION="v${{ steps.vars.outputs.version }}"
          
          # Create and push tag
          git tag -a "$VERSION" -m "Release $VERSION" || echo "Tag exists"
          git push origin "$VERSION" || echo "Tag already pushed"
          
          # Get previous tag for release notes
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Get commits between tags
          COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          
          # Categorize commits
          BREAKING=$(echo "$COMMITS" | grep -i "BREAKING CHANGE" || echo "")
          FEATURES=$(echo "$COMMITS" | grep -iE "^- (feat|feature):" || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "^- fix:" || echo "")
          CHORES=$(echo "$COMMITS" | grep -iE "^- (chore|docs|ci):" || echo "")
          
          # Build release notes
          NOTES="## Release ${VERSION}\n\n"
          NOTES="${NOTES}**Type:** ${{ steps.version.outputs.bump_type }} release\n\n"
          
          [ -n "$BREAKING" ] && NOTES="${NOTES}### 💥 Breaking Changes\n${BREAKING}\n\n"
          [ -n "$FEATURES" ] && NOTES="${NOTES}### ✨ New Features\n${FEATURES}\n\n"
          [ -n "$FIXES" ] && NOTES="${NOTES}### 🐛 Bug Fixes\n${FIXES}\n\n"
          [ -n "$CHORES" ] && NOTES="${NOTES}### 🏗️ Maintenance\n${CHORES}\n\n"
          
          # Save release notes
          echo -e "$NOTES" > release_notes.md
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.vars.outputs.version }}
          name: Release v${{ steps.vars.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Production deployment complete!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Version:       v${{ steps.version.outputs.current_version }} → v${{ steps.vars.outputs.version }}"
          echo "Type:          ${{ steps.version.outputs.bump_type }} release"
          echo "Commit:        ${{ steps.vars.outputs.commit_sha }}"
          echo "Backend:       https://api.private.bluerelief.app"
          echo "Frontend:      https://platform.private.bluerelief.app"
          echo "Email Service: https://email-api.private.bluerelief.app"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
