name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  REGISTRY: registry.rsft.co
  BACKEND_IMAGE: bluerelief/backend
  FRONTEND_IMAGE: bluerelief/frontend

jobs:
  deploy-preview:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Predict version bump
        id: version_prediction
        run: |
          # Get the current version from main branch
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:VERSION | tr -d '\n' | sed 's/^v//')
          
          # Get commits in this PR
          PR_COMMITS=$(git log origin/main..HEAD --pretty=format:"%s")
          
          # Detect bump type
          BUMP_TYPE="patch"
          if echo "$PR_COMMITS" | grep -iqE "BREAKING CHANGE|MAJOR:|breaking:"; then
            BUMP_TYPE="major"
          elif echo "$PR_COMMITS" | grep -iqE "^feat:|^feature:|MINOR:|minor:|new feature"; then
            BUMP_TYPE="minor"
          fi
          
          # Calculate new version
          IFS='.' read -r major minor patch <<< "$MAIN_VERSION"
          case $BUMP_TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          NEW_VERSION="${major}.${minor}.${patch}"
          
          echo "main_version=$MAIN_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Set up environment
        id: vars
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          # Truncate branch name if too long (max 30 chars to leave room for "bluerelief-" prefix and "-celery-worker" suffix)
          if [ ${#SANITIZED_BRANCH} -gt 30 ]; then
            SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | cut -c1-30)
          fi
          
          # Remove trailing hyphens
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/-*$//')
          
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE_TAG="${SANITIZED_BRANCH}-${COMMIT_SHA}"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "backend_url=https://api-${SANITIZED_BRANCH}.private.bluerelief.app" >> $GITHUB_OUTPUT
          echo "frontend_url=https://${SANITIZED_BRANCH}.private.bluerelief.app" >> $GITHUB_OUTPUT

      - name: Build and push backend
        run: |
          cd server
          docker build -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.vars.outputs.image_tag }} .
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.vars.outputs.image_tag }}

      - name: Build and push frontend
        run: |
          cd client
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ steps.vars.outputs.backend_url }} \
            --build-arg NEXT_PUBLIC_MAPBOX_TOKEN=${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }} \
            --build-arg NODE_ENV=production \
            -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.vars.outputs.image_tag }} .
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.vars.outputs.image_tag }}

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install bluerelief-${{ steps.vars.outputs.sanitized_branch }} \
            /home/geeth/Development/k8s/helm/celery-app-chart \
            -f /home/geeth/Development/k8s/helm/celery-app-chart/bluerelief-values.yaml \
            -n bluerelief \
            --create-namespace \
            --set app.image.tag=${{ steps.vars.outputs.image_tag }} \
            --set frontend.image.tag=${{ steps.vars.outputs.image_tag }} \
            --set ingress.host="api-${{ steps.vars.outputs.sanitized_branch }}.private.bluerelief.app" \
            --set frontend.ingress.host="${{ steps.vars.outputs.sanitized_branch }}.private.bluerelief.app" \
            --set frontend.env.NEXT_PUBLIC_API_URL="${{ steps.vars.outputs.backend_url }}" \
            --wait

      - name: Comment on PR
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Preview Deployment Ready!\n\n` +
                    `**Backend:** ${{ steps.vars.outputs.backend_url }}\n` +
                    `**Frontend:** ${{ steps.vars.outputs.frontend_url }}\n\n` +
                    `Commit: \`${{ steps.vars.outputs.commit_sha }}\`\n\n` +
                    `---\n\n` +
                    `## ✨ Version Bump Prediction\n` +
                    `When this PR is merged to main, the version will be bumped:\n\n` +
                    `**${{ steps.version_prediction.outputs.main_version }}** → **${{ steps.version_prediction.outputs.new_version }}** (${{ steps.version_prediction.outputs.bump_type }})\n\n` +
                    `💡 **How to change the version bump type**\n` +
                    `- For **patch**: Use \`fix:\`, \`chore:\`, \`docs:\`, or \`ci:\` in commit messages\n` +
                    `- For **minor**: Use \`feat:\` or \`feature:\` in commit messages\n` +
                    `- For **major**: Include \`BREAKING CHANGE\` or \`breaking:\` in commit messages\n\n` +
                    `_Preview will be automatically deleted when PR is closed or merged._`
            })
      
      - name: Print deployment info
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Preview Deployment Ready!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Backend:  ${{ steps.vars.outputs.backend_url }}"
          echo "Frontend: ${{ steps.vars.outputs.frontend_url }}"
          echo "Commit:   ${{ steps.vars.outputs.commit_sha }}"
          echo ""
          echo "Version Prediction:"
          echo "  Current:  v${{ steps.version_prediction.outputs.main_version }}"
          echo "  New:      v${{ steps.version_prediction.outputs.new_version }}"
          echo "  Type:     ${{ steps.version_prediction.outputs.bump_type }}"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"