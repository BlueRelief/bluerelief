name: Auto Merge

on:
  workflow_run:
    workflows: ["Deploy Preview"]
    types: [completed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to enable auto-merge for'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  enable-auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Check if PR is ready for auto-merge
        id: check-ready
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let prNumber;
            
            if (context.eventName === 'workflow_dispatch') {
              prNumber = parseInt(context.payload.inputs.pr_number);
              console.log(`Manual trigger for PR #${prNumber}`);
            } else {
              const workflowRun = context.payload.workflow_run;
              const prs = workflowRun.pull_requests;
              
              if (!prs || prs.length === 0) {
                console.log('No PR associated with this workflow run');
                return false;
              }
              
              prNumber = prs[0].number;
              console.log(`Processing PR #${prNumber} after Deploy Preview completed`);
              console.log(`Deploy Preview conclusion: ${workflowRun.conclusion}`);
            }
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            
            const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
            const hasApproval = approvedReviews.length > 0;
            console.log(`Approved reviews: ${approvedReviews.length}`);
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            
            if (pr.draft) {
              console.log('PR is a draft, skipping auto-merge');
              return false;
            }
            
            if (pr.user.login === 'dependabot[bot]') {
              console.log('PR is from dependabot, skipping auto-merge');
              return false;
            }
            
            console.log(`PR mergeable: ${pr.mergeable}`);
            console.log(`PR mergeable_state: ${pr.mergeable_state}`);
            
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });
            
            const { data: statuses } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });
            
            // Preview deployment status
            let previewComplete, previewSuccess;
            
            if (context.eventName === 'workflow_dispatch') {
              // Manual trigger - assume preview is complete
              previewComplete = true;
              previewSuccess = true;
              console.log('Manual trigger - assuming preview deployment is complete');
            } else {
              // Triggered by workflow_run - preview deployment already completed successfully
              previewComplete = true;
              previewSuccess = context.payload.workflow_run.conclusion === 'success';
              console.log(`Preview deployment completed: ${previewComplete}`);
              console.log(`Preview deployment successful: ${previewSuccess}`);
            }
            
            const relevantChecks = checkRuns.check_runs.filter(
              run => run.name !== 'enable-auto-merge'
            );
            
            const allChecksComplete = relevantChecks.length === 0 || relevantChecks.every(
              run => run.status === 'completed'
            );
            const allChecksPassed = relevantChecks.length === 0 || relevantChecks.every(
              run => run.conclusion === 'success' || run.conclusion === 'skipped' || run.conclusion === 'neutral'
            );
            
            const statusesOk = statuses.state === 'success' || statuses.statuses.length === 0;
            
            console.log(`Total check runs: ${checkRuns.check_runs.length}`);
            console.log(`Relevant checks: ${relevantChecks.length}`);
            console.log(`All checks complete: ${allChecksComplete}`);
            console.log(`All checks passed: ${allChecksPassed}`);
            console.log(`Commit statuses state: ${statuses.state}`);
            console.log(`Commit statuses count: ${statuses.statuses.length}`);
            console.log(`Statuses OK: ${statusesOk}`);
            console.log(`Preview complete: ${previewComplete}`);
            console.log(`Preview success: ${previewSuccess}`);
            
            const isReady = hasApproval && allChecksComplete && allChecksPassed && statusesOk && previewComplete && previewSuccess;
            console.log(`PR ready for auto-merge: ${isReady}`);
            
            if (!isReady) {
              console.log('Waiting for:');
              if (!hasApproval) console.log('  - Approval');
              if (!allChecksComplete) console.log('  - Checks to complete');
              if (!allChecksPassed) console.log('  - Checks to pass');
              if (!statusesOk) console.log('  - Commit statuses to succeed');
              if (!previewComplete) console.log('  - Preview deployment to complete');
              if (!previewSuccess) console.log('  - Preview deployment to succeed');
            }
            
            return isReady;

      - name: Enable auto-merge
        if: steps.check-ready.outputs.result == 'true'
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              let prNumber;
              
              if (context.eventName === 'workflow_dispatch') {
                prNumber = parseInt(context.payload.inputs.pr_number);
              } else {
                const workflowRun = context.payload.workflow_run;
                const prs = workflowRun.pull_requests;
                prNumber = prs[0].number;
              }
              
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
              
              const pullRequestId = pr.node_id;
              
              const mutation = `
                mutation($pullRequestId: ID!, $mergeMethod: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: {
                    pullRequestId: $pullRequestId,
                    mergeMethod: $mergeMethod
                  }) {
                    pullRequest {
                      autoMergeRequest {
                        enabledAt
                        enabledBy {
                          login
                        }
                      }
                    }
                  }
                }
              `;
              
              const result = await github.graphql(mutation, {
                pullRequestId: pullRequestId,
                mergeMethod: 'MERGE'
              });
              
              console.log('✅ Auto-merge enabled successfully');
              console.log(result);
            } catch (error) {
              if (error.message.includes('already enabled') || error.message.includes('auto-merge is already enabled')) {
                console.log('ℹ️  Auto-merge already enabled');
              } else if (error.message.includes('unstable status')) {
                console.log('⏳ PR is not ready yet - checks may still be running or branch protection rules not met');
                console.log('This workflow will retry when the check_suite completes');
              } else {
                console.error('❌ Error enabling auto-merge:', error.message);
                throw error;
              }
            }

      - name: Add comment
        if: steps.check-ready.outputs.result == 'true'
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let prNumber;
            
            if (context.eventName === 'workflow_dispatch') {
              prNumber = parseInt(context.payload.inputs.pr_number);
            } else {
              const workflowRun = context.payload.workflow_run;
              const prs = workflowRun.pull_requests;
              prNumber = prs[0].number;
            }
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Auto-merge enabled')
            );
            
            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '✅ **Auto-merge enabled** - This PR will be automatically merged when all checks pass.'
              });
            }