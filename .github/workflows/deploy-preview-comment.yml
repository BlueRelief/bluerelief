name: Deploy Preview (Comment Triggered)

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  REGISTRY: registry.rsft.co
  BACKEND_IMAGE: bluerelief/backend
  FRONTEND_IMAGE: bluerelief/frontend

jobs:
  deploy-preview:
    runs-on: self-hosted
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '@deploy')
    steps:
      - name: Extract deployment name
        id: extract
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment.body;
            const match = comment.match(/@deploy\s+(\S+)/);
            
            if (!match) {
              core.setFailed('No deployment name found. Usage: @deploy <name>');
              return;
            }
            
            let deployName = match[1].toLowerCase().replace(/[^a-z0-9-]/g, '-');
            
            // Remove leading/trailing hyphens
            deployName = deployName.replace(/^-+|-+$/g, '');
            
            // Truncate if too long (max 40 chars)
            if (deployName.length > 40) {
              deployName = deployName.substring(0, 40).replace(/-+$/, '');
            }
            
            if (!deployName || deployName.length === 0) {
              core.setFailed('Invalid deployment name after sanitization');
              return;
            }
            
            core.setOutput('deploy_name', deployName);
            core.setOutput('pr_number', context.issue.number);

      - name: Get PR details
        id: pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.extract.outputs.pr_number }}
            });
            core.setOutput('ref', pr.data.head.ref);
            core.setOutput('sha', pr.data.head.sha);

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.pr.outputs.ref }}

      - name: Set up environment
        id: vars
        run: |
          DEPLOY_NAME="${{ steps.extract.outputs.deploy_name }}"
          COMMIT_SHA=$(echo ${{ steps.pr.outputs.sha }} | cut -c1-7)
          IMAGE_TAG="${DEPLOY_NAME}-${COMMIT_SHA}"
          
          echo "deploy_name=$DEPLOY_NAME" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "backend_url=https://api-${DEPLOY_NAME}.private.bluerelief.app" >> $GITHUB_OUTPUT
          echo "frontend_url=https://${DEPLOY_NAME}.private.bluerelief.app" >> $GITHUB_OUTPUT

      - name: Build and push backend
        run: |
          cd server
          docker build -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.vars.outputs.image_tag }} .
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.vars.outputs.image_tag }}

      - name: Build and push frontend
        run: |
          cd client
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ steps.vars.outputs.backend_url }} \
            --build-arg NEXT_PUBLIC_MAPBOX_TOKEN=${{ secrets.NEXT_PUBLIC_MAPBOX_TOKEN }} \
            --build-arg NODE_ENV=production \
            -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.vars.outputs.image_tag }} .
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.vars.outputs.image_tag }}

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install bluerelief-${{ steps.vars.outputs.deploy_name }} \
            /home/geeth/Development/k8s/helm/celery-app-chart \
            -f /home/geeth/Development/k8s/helm/celery-app-chart/bluerelief-values.yaml \
            -n bluerelief \
            --create-namespace \
            --set app.image.tag=${{ steps.vars.outputs.image_tag }} \
            --set frontend.image.tag=${{ steps.vars.outputs.image_tag }} \
            --set ingress.host="api-${{ steps.vars.outputs.deploy_name }}.private.bluerelief.app" \
            --set frontend.ingress.host="${{ steps.vars.outputs.deploy_name }}.private.bluerelief.app" \
            --set frontend.env.NEXT_PUBLIC_API_URL="${{ steps.vars.outputs.backend_url }}" \
            --wait

      - name: Comment on PR
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.extract.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸš€ Custom Preview Deployment Ready!\n\n` +
                    `**Deployment Name:** \`${{ steps.vars.outputs.deploy_name }}\`\n` +
                    `**Backend:** ${{ steps.vars.outputs.backend_url }}\n` +
                    `**Frontend:** ${{ steps.vars.outputs.frontend_url }}\n\n` +
                    `Commit: \`${{ steps.vars.outputs.commit_sha }}\`\n\n` +
                    `_To redeploy with a different name, comment \`@deploy <name>\` again._`
            })

