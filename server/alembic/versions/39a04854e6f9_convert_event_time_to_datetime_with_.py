"""convert event_time to datetime with proper casting

Revision ID: 39a04854e6f9
Revises: 
Create Date: 2025-10-20 07:08:09.392239

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '39a04854e6f9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('schema_migrations')
    with op.batch_alter_table('archived_disasters', schema=None) as batch_op:
        batch_op.drop_index('idx_archived_disasters_disaster_type')
        batch_op.drop_index('idx_archived_disasters_end_time')
        batch_op.drop_index('idx_archived_disasters_original_id')
        batch_op.drop_index('idx_archived_disasters_start_time')

    op.drop_table('archived_disasters')
    with op.batch_alter_table('archived_alerts', schema=None) as batch_op:
        batch_op.drop_index('idx_archived_alerts_disaster_id')
        batch_op.drop_index('idx_archived_alerts_original_id')

    op.drop_table('archived_alerts')
    with op.batch_alter_table('admin_activity_log', schema=None) as batch_op:
        batch_op.drop_index('idx_admin_activity_log_action')
        batch_op.drop_index('idx_admin_activity_log_admin_id')
        batch_op.drop_index('idx_admin_activity_log_created_at')

    op.drop_table('admin_activity_log')
    with op.batch_alter_table('archived_posts', schema=None) as batch_op:
        batch_op.drop_index('idx_archived_posts_disaster_id')
        batch_op.drop_index('idx_archived_posts_event_time')
        batch_op.drop_index('idx_archived_posts_original_id')

    op.drop_table('archived_posts')
    with op.batch_alter_table('admin_settings', schema=None) as batch_op:
        batch_op.drop_index('idx_admin_settings_admin_id')
        batch_op.drop_index('idx_admin_settings_key')

    op.drop_table('admin_settings')
    with op.batch_alter_table('system_settings', schema=None) as batch_op:
        batch_op.drop_index('idx_system_settings_is_public')
        batch_op.drop_index('idx_system_settings_key')

    op.drop_table('system_settings')
    with op.batch_alter_table('alert_queue', schema=None) as batch_op:
        batch_op.alter_column('alert_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('priority',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('3'))
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.alter_column('scheduled_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('retry_count',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('max_retries',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('3'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index('idx_alert_queue_alert_id')
        batch_op.drop_index('idx_alert_queue_priority')
        batch_op.drop_index('idx_alert_queue_scheduled_at')
        batch_op.drop_index('idx_alert_queue_status')
        batch_op.drop_index('idx_alert_queue_user_id')
        batch_op.create_index(batch_op.f('ix_alert_queue_alert_id'), ['alert_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_alert_queue_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_alert_queue_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_alert_queue_scheduled_at'), ['scheduled_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_alert_queue_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_alert_queue_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('alerts', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('is_read',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('alert_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.drop_index('idx_alerts_created_at')
        batch_op.drop_index('idx_alerts_disaster_id')
        batch_op.drop_index('idx_alerts_is_read')
        batch_op.drop_index('idx_alerts_severity')
        batch_op.create_index(batch_op.f('ix_alerts_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_disaster_id'), ['disaster_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_is_read'), ['is_read'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_severity'), ['severity'], unique=False)
        batch_op.drop_column('metadata')

    with op.batch_alter_table('data_feeds', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'active'::character varying"))
        batch_op.alter_column('total_runs',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.create_index(batch_op.f('ix_data_feeds_id'), ['id'], unique=False)

    with op.batch_alter_table('disasters', schema=None) as batch_op:
        batch_op.alter_column('event_time',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.DateTime(),
               comment=None,
               existing_comment='Disaster occurrence timestamp (UTC datetime). Extracted from social media posts and normalized by normalize_event_time() function. NULL if timestamp could not be determined.',
               existing_nullable=True,
               postgresql_using='event_time::timestamp without time zone')
        batch_op.alter_column('disaster_type',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.alter_column('archived',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.drop_index('idx_disasters_coordinates')
        batch_op.drop_index('idx_disasters_event_time')
        batch_op.drop_index('idx_disasters_extracted_event')
        batch_op.drop_index('idx_disasters_latitude')
        batch_op.drop_index('idx_disasters_location_name')
        batch_op.drop_index('idx_disasters_longitude')
        batch_op.drop_index('idx_disasters_post_id')
        batch_op.create_index(batch_op.f('ix_disasters_archived'), ['archived'], unique=False)
        batch_op.create_index(batch_op.f('ix_disasters_event_time'), ['event_time'], unique=False)
        batch_op.create_index(batch_op.f('ix_disasters_latitude'), ['latitude'], unique=False)
        batch_op.create_index(batch_op.f('ix_disasters_location_name'), ['location_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_disasters_longitude'), ['longitude'], unique=False)
        batch_op.drop_constraint('disasters_post_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'posts', ['post_id'], ['id'])

    with op.batch_alter_table('email_logs', schema=None) as batch_op:
        batch_op.alter_column('payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.create_index(batch_op.f('ix_email_logs_crisis_id'), ['crisis_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_email_logs_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_email_logs_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.alter_column('raw_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('media_urls',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('hashtags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('mentions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('external_urls',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('content_labels',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('content_warnings',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.drop_index('idx_posts_has_media')
        batch_op.drop_index('idx_posts_indexed_at')
        batch_op.drop_index('idx_posts_language')
        batch_op.drop_index('idx_posts_like_count')
        batch_op.drop_index('idx_posts_moderation_status')
        batch_op.drop_index('idx_posts_reply_count')
        batch_op.drop_index('idx_posts_repost_count')
        batch_op.drop_index('idx_posts_sentiment')
        batch_op.drop_index('idx_posts_sentiment_score')
        batch_op.drop_constraint('posts_bluesky_id_key', type_='unique')
        batch_op.drop_index('ix_posts_bluesky_id')
        batch_op.create_index(batch_op.f('ix_posts_bluesky_id'), ['bluesky_id'], unique=True)

    with op.batch_alter_table('user_alert_preferences', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.alter_column('alert_types',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False,
               existing_server_default=sa.text('\'["new_crisis", "severity_change", "update"]\'::jsonb'))
        batch_op.alter_column('min_severity',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('3'))
        batch_op.alter_column('email_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('regions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('disaster_types',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index('idx_user_alert_preferences_user_id')
        batch_op.create_index(batch_op.f('ix_user_alert_preferences_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_alert_preferences_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('user_notification_preferences', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_notification_preferences_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_notification_preferences_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
        batch_op.alter_column('is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('failed_login_attempts',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.drop_index('idx_users_is_active')
        batch_op.drop_index('idx_users_is_admin')
        batch_op.drop_index('idx_users_role')
        batch_op.drop_constraint('users_email_key', type_='unique')
        batch_op.drop_index('ix_users_email')
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_is_admin'), ['is_admin'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_role'), ['role'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_role'))
        batch_op.drop_index(batch_op.f('ix_users_is_admin'))
        batch_op.drop_index(batch_op.f('ix_users_is_active'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.create_index('ix_users_email', ['email'], unique=False)
        batch_op.create_unique_constraint('users_email_key', ['email'], postgresql_nulls_not_distinct=False)
        batch_op.create_index('idx_users_role', ['role'], unique=False)
        batch_op.create_index('idx_users_is_admin', ['is_admin'], unique=False)
        batch_op.create_index('idx_users_is_active', ['is_active'], unique=False)
        batch_op.alter_column('failed_login_attempts',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'user'::character varying"))

    with op.batch_alter_table('user_notification_preferences', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_notification_preferences_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_notification_preferences_id'))

    with op.batch_alter_table('user_alert_preferences', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_alert_preferences_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_alert_preferences_id'))
        batch_op.create_index('idx_user_alert_preferences_user_id', ['user_id'], unique=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('disaster_types',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('regions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('email_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('min_severity',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('3'))
        batch_op.alter_column('alert_types',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text('\'["new_crisis", "severity_change", "update"]\'::jsonb'))
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)

    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_posts_bluesky_id'))
        batch_op.create_index('ix_posts_bluesky_id', ['bluesky_id'], unique=False)
        batch_op.create_unique_constraint('posts_bluesky_id_key', ['bluesky_id'], postgresql_nulls_not_distinct=False)
        batch_op.create_index('idx_posts_sentiment_score', ['sentiment_score'], unique=False)
        batch_op.create_index('idx_posts_sentiment', ['sentiment'], unique=False)
        batch_op.create_index('idx_posts_repost_count', ['repost_count'], unique=False)
        batch_op.create_index('idx_posts_reply_count', ['reply_count'], unique=False)
        batch_op.create_index('idx_posts_moderation_status', ['moderation_status'], unique=False)
        batch_op.create_index('idx_posts_like_count', ['like_count'], unique=False)
        batch_op.create_index('idx_posts_language', ['language'], unique=False)
        batch_op.create_index('idx_posts_indexed_at', ['indexed_at'], unique=False)
        batch_op.create_index('idx_posts_has_media', ['has_media'], unique=False)
        batch_op.alter_column('content_warnings',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('content_labels',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('external_urls',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('mentions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('hashtags',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('media_urls',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('raw_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('email_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_email_logs_user_id'))
        batch_op.drop_index(batch_op.f('ix_email_logs_id'))
        batch_op.drop_index(batch_op.f('ix_email_logs_crisis_id'))
        batch_op.alter_column('payload',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('disasters', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('disasters_post_id_fkey', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_index(batch_op.f('ix_disasters_longitude'))
        batch_op.drop_index(batch_op.f('ix_disasters_location_name'))
        batch_op.drop_index(batch_op.f('ix_disasters_latitude'))
        batch_op.drop_index(batch_op.f('ix_disasters_event_time'))
        batch_op.drop_index(batch_op.f('ix_disasters_archived'))
        batch_op.create_index('idx_disasters_post_id', ['post_id'], unique=False)
        batch_op.create_index('idx_disasters_longitude', ['longitude'], unique=False)
        batch_op.create_index('idx_disasters_location_name', ['location_name'], unique=False)
        batch_op.create_index('idx_disasters_latitude', ['latitude'], unique=False)
        batch_op.create_index('idx_disasters_extracted_event', [sa.text('extracted_at DESC'), 'event_time'], unique=False)
        batch_op.create_index('idx_disasters_event_time', [sa.text('event_time DESC')], unique=False)
        batch_op.create_index('idx_disasters_coordinates', ['latitude', 'longitude'], unique=False)
        batch_op.alter_column('archived',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('disaster_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('event_time',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(length=255),
               comment='Disaster occurrence timestamp (UTC datetime). Extracted from social media posts and normalized by normalize_event_time() function. NULL if timestamp could not be determined.',
               existing_nullable=True)

    with op.batch_alter_table('data_feeds', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_data_feeds_id'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('total_runs',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'active'::character varying"))

    with op.batch_alter_table('alerts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.drop_index(batch_op.f('ix_alerts_severity'))
        batch_op.drop_index(batch_op.f('ix_alerts_is_read'))
        batch_op.drop_index(batch_op.f('ix_alerts_id'))
        batch_op.drop_index(batch_op.f('ix_alerts_disaster_id'))
        batch_op.drop_index(batch_op.f('ix_alerts_created_at'))
        batch_op.create_index('idx_alerts_severity', ['severity'], unique=False)
        batch_op.create_index('idx_alerts_is_read', ['is_read'], unique=False)
        batch_op.create_index('idx_alerts_disaster_id', ['disaster_id'], unique=False)
        batch_op.create_index('idx_alerts_created_at', [sa.text('created_at DESC')], unique=False)
        batch_op.alter_column('alert_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('is_read',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    with op.batch_alter_table('alert_queue', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_alert_queue_user_id'))
        batch_op.drop_index(batch_op.f('ix_alert_queue_status'))
        batch_op.drop_index(batch_op.f('ix_alert_queue_scheduled_at'))
        batch_op.drop_index(batch_op.f('ix_alert_queue_priority'))
        batch_op.drop_index(batch_op.f('ix_alert_queue_id'))
        batch_op.drop_index(batch_op.f('ix_alert_queue_alert_id'))
        batch_op.create_index('idx_alert_queue_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_alert_queue_status', ['status'], unique=False)
        batch_op.create_index('idx_alert_queue_scheduled_at', ['scheduled_at'], unique=False)
        batch_op.create_index('idx_alert_queue_priority', ['priority'], unique=False)
        batch_op.create_index('idx_alert_queue_alert_id', ['alert_id'], unique=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('max_retries',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('3'))
        batch_op.alter_column('retry_count',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('scheduled_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
        batch_op.alter_column('priority',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('3'))
        batch_op.alter_column('alert_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    op.create_table('system_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('setting_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('setting_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='system_settings_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='system_settings_pkey'),
    sa.UniqueConstraint('setting_key', name='system_settings_setting_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('system_settings', schema=None) as batch_op:
        batch_op.create_index('idx_system_settings_key', ['setting_key'], unique=False)
        batch_op.create_index('idx_system_settings_is_public', ['is_public'], unique=False)

    op.create_table('admin_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('setting_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('setting_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name='admin_settings_admin_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='admin_settings_pkey'),
    sa.UniqueConstraint('admin_id', 'setting_key', name='admin_settings_admin_id_setting_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('admin_settings', schema=None) as batch_op:
        batch_op.create_index('idx_admin_settings_key', ['setting_key'], unique=False)
        batch_op.create_index('idx_admin_settings_admin_id', ['admin_id'], unique=False)

    op.create_table('archived_posts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('original_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('disaster_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('event_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sentiment', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='archived_posts_pkey')
    )
    with op.batch_alter_table('archived_posts', schema=None) as batch_op:
        batch_op.create_index('idx_archived_posts_original_id', ['original_id'], unique=False)
        batch_op.create_index('idx_archived_posts_event_time', ['event_time'], unique=False)
        batch_op.create_index('idx_archived_posts_disaster_id', ['disaster_id'], unique=False)

    op.create_table('admin_activity_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('target_user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name='admin_activity_log_admin_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], name='admin_activity_log_target_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='admin_activity_log_pkey')
    )
    with op.batch_alter_table('admin_activity_log', schema=None) as batch_op:
        batch_op.create_index('idx_admin_activity_log_created_at', [sa.text('created_at DESC')], unique=False)
        batch_op.create_index('idx_admin_activity_log_admin_id', ['admin_id'], unique=False)
        batch_op.create_index('idx_admin_activity_log_action', ['action'], unique=False)

    op.create_table('archived_alerts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('original_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('disaster_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='archived_alerts_pkey')
    )
    with op.batch_alter_table('archived_alerts', schema=None) as batch_op:
        batch_op.create_index('idx_archived_alerts_original_id', ['original_id'], unique=False)
        batch_op.create_index('idx_archived_alerts_disaster_id', ['disaster_id'], unique=False)

    op.create_table('archived_disasters',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('original_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('disaster_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('severity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('affected_population', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='archived_disasters_pkey')
    )
    with op.batch_alter_table('archived_disasters', schema=None) as batch_op:
        batch_op.create_index('idx_archived_disasters_start_time', ['start_time'], unique=False)
        batch_op.create_index('idx_archived_disasters_original_id', ['original_id'], unique=False)
        batch_op.create_index('idx_archived_disasters_end_time', ['end_time'], unique=False)
        batch_op.create_index('idx_archived_disasters_disaster_type', ['disaster_type'], unique=False)

    op.create_table('schema_migrations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='schema_migrations_pkey'),
    sa.UniqueConstraint('migration_name', name='schema_migrations_migration_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
